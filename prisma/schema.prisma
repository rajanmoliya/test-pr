generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
// User Management
=======
>>>>>>> fa348557fcf99f2ce03f13fa6388d3979e6e1240
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
<<<<<<< HEAD
  role          Role      @default(CUSTOMER)
  firstName     String
  lastName      String
  phone         String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  cart          Cart?
  wishlist      WishlistItem[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

// Product Management
model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Decimal   @db.Decimal(10, 2)
  stock       Int
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  images      String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orderItems     OrderItem[]
  cartItems      CartItem[]
  reviews        Review[]
  wishlistItems  WishlistItem[]
  specifications ProductSpecification[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
}

// Order Management
model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  addressId     String
  address       Address     @relation(fields: [addressId], references: [id])
  paymentId     String?
  payment       Payment?    @relation(fields: [paymentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  orderItems    OrderItem[]

  @@index([userId])
  @@index([addressId])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}

// Shopping Cart
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int

  @@index([cartId])
  @@index([productId])
}

// Wishlist
model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  addedAt   DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

// Product Reviews
model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([productId])
}

// Address Management
model Address {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  street      String
  city        String
  state       String
  country     String
  postalCode  String
  isDefault   Boolean  @default(false)
  orders      Order[]

  @@index([userId])
}

// Payment Management
model Payment {
  id            String        @id @default(uuid())
  amount        Decimal       @db.Decimal(10, 2)
  currency      String
  status        PaymentStatus @default(PENDING)
  provider      String
  paymentMethod String
  orders        Order[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Product Specifications
model ProductSpecification {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  key       String
  value     String

  @@index([productId])
}

// Enums
enum Role {
  ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
=======
  username      String    @unique
  balance       Float     @default(0)
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bets          Bet[]
  transactions  Transaction[]
}

model Bet {
  id          String    @id @default(uuid())
  userId      String
  amount      Float
  odds        Float
  status      BetStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  event       Event     @relation(fields: [eventId], references: [id])
  eventId     String
  selection   String
}

model Event {
  id          String    @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      EventStatus @default(SCHEDULED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bets        Bet[]
  odds        EventOdds[]
}

model EventOdds {
  id          String    @id @default(uuid())
  eventId     String
  selection   String
  odds        Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  event       Event     @relation(fields: [eventId], references: [id])
}

model Transaction {
  id          String    @id @default(uuid())
  userId      String
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
}

enum EventStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET
  WINNING
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
>>>>>>> fa348557fcf99f2ce03f13fa6388d3979e6e1240
} 